snatchTexitem(S4obj,num_input[i])
if(use.html & length(num_input) == 0){
snatchHTMLitem(S4obj,i)
if(!use.html & length(num_input) == 0){
for(i in 1:length(S4obj@results@HTML)){
snatchTeXitem(S4obj,i)
return(use.html)
snatchHTMLitem(snatch.Chunk,i)
snatchPrint(snatch.Chunk)
base::source("/tmp/r-plugin-user/Rsource-1489-lab12.rnw")
require(plyr)
library(reshape)
library(reshape2)
library(plyr)
melt(mf,id.vars='disp',measure.vars=c('resids','fitted','disp'))
qplot(disp ~ mpg, data = as.data.frame(mf))
qplot(mpg,disp, data = as.data.frame(mf))
mf.lm
names(mf.lm)
mf.lm$coefficients
mf.lm$coefficients[1]
lm(disp ~ mpg,data = as.data.frame(mf))$coefficients[2]\
lm(disp ~ mpg,data = as.data.frame(mf))$coefficients[2]
lm(disp ~ mpg,data = as.data.frame(mf))$coefficients[1],
lm(disp ~ mpg,data = as.data.frame(mf))
names(lm(disp ~ mpg,data = as.data.frame(mf)))
lm(disp ~ mpg,data = as.data.frame(mf))$fitted.values
geom_point(data=mf,aes(x=mpg,y=lm(disp ~ mpg,data = as.data.frame(mf))$fitted.values)
geom_point(data=mf,aes(x=mpg,y=lm(disp ~ mpg,data = as.data.frame(mf))$fitted.values))
geom_point(aes(x=mf$mpg,y=lm(disp ~ mpg,data = as.data.frame(mf))$fitted.values))
geom_point(aes(x=mf$mpg,y=lm(disp ~ mpg,data = as.data.frame(mf))$fitted.values,shape=1))
geom_point(aes(x=mf$mpg,y=lm(disp ~ mpg,data = as.data.frame(mf))$fitted.values),shape=1)
qplot(mpg, disp, data = as.data.frame(mf))+
intercept=lm(disp ~ mpg,data = as.data.frame(mf))$coefficients[1],
slope=lm(disp ~ mpg,data = as.data.frame(mf))$coefficients[2]
head(mtcars)
al.d <- melt(as.data.frame(mf), id = 'mpg', measure.vars = c('disp','fitted','resids'))
mf$y = mf$disp
qplot(mpg, value, data = al.d[which(al.d$variable == 'disp'),])+
qplot(y, value, data = al.d[which(al.d$variable == 'disp'),])
mf.lm <- lm(disp ~ mpg, data = as.data.frame(me))
mf.lm$fitted
mf.lm$predicted
mf.lm$predict
mf.lm$resid
d$resid  <- mf.lm$resid
al.d <- melt(d, id = 'mpg', measure.vars = c('disp','fitted','resids'))
head(al.d
head(al.d)
qplot(mpg, value, data = al.d[which(al.d$variable == 'disp'),])
qplot(mpg, value, data = al.d[which(al.d$variable %in% c('disp','fitted')),],color=variable)
qplot(mpg, value, data = al.d[which(al.d$variable %in% c('disp','fitted')),],color=variable,shape=variable)
qplot(mpg, value, ylab='disp',data = al.d[which(al.d$variable %in% c('disp','fitted')),],color=variable,shape=variable)
)+
geom_point(aes(x=mf$mpg,y=lm(disp ~ mpg,data = as.data.frame(mf))$fitted.values),shape=1,size=.3)
qplot(mpg, value, ylab='residual', data = al.d[which(al.d$variable %in% c('residual')),],color=variable,shape=variable) +
geom_point(data=al.d[which(al.d$variable %in% c('residual')),],aes(x=mpg,y=value,color=variable))
geom_point(data=al.d[which(al.d$variable == 'residual'),],aes(x=mpg,y=value,color=variable))
al.d[which(al.d$variable == 'residual'),]
al.d[which(al.d$variable == 'resid'),]
al.d[which(al.d$variable == 'resids'),]
geom_point(data=al.d[which(al.d$variable == 'resids'),],aes(x=mpg,y=value,color=variable))
plot(disp ~ mpg,data=as.data.frame(mf))
d <- mf
mf.lm <- lm(disp ~ mpg, data = as.data.frame(mf))
d$fitted <- mf.lm$fitted
d$resids <- mf.lm$resid
al.d <- melt(as.data.frame(d), id = 'mpg', measure.vars = c('disp','fitted','resids'))
qplot(mpg, value, ylab='disp', data = al.d[which(al.d$variable %in% c('disp','fitted')),],color=variable,shape=variable) +
geom_abline(
intercept=mf.lm$coefficients[1],
slope=mf.lm$coefficients[2]
ggplot()+geom_point(data=al.d[which(al.d$variable == 'resids'),],aes(x=mpg,y=value,color=variable))
melt(mf.lm,id.vars='disp',measure.vars=c('resids','fitted','disp'))
get_points(DSD_GaussianMoving(n=100,t=33),n=9900)
get_points
fuck.cluster = kmeans(pd,3)$cluster
print(qplot(x, y, color=fuck.cluster, data=pd))
print(qplot(x, y, color=as.factor(cluster), data=pd))
cluster = kmeans(pd,3)$cluster
k.mn.3 = kmeans(pd,3)
k.mn.2 = kmeans(pd,2)
names(k.mn.3)
k.mn.3$centers
square(k.mn.3$centers)
(k.mn.3$centers)^2
row.sum((k.mn.3$centers)^2)
?rowSum
centers.3 <- (k.mn.3$centers)^2
sum(centers.3[1:3,])
sum(centers.3[,1])
sum(centers.3[1,])
rowSums(k.mn.3$centers)^2
rowSums((k.mn.3$centers)^2)
rowSums((k.mn.2$centers)^2)
d.2 <- rowSums((k.mn.2$centers)^2)
?k.means
?kmeans
library(cluster)
?clusGap
clusGap(as.data.frame(d), kmeans, 'firstSEmax',B=100)
clusGap(as.data.frame(pd), kmeans, 'firstSEmax',B=100)
clusGap(as.data.frame(pd), kmeans, 'firstSEmax',B=200)
clusGap(as.data.frame(pd), kmeans, 'firstSEmax',B=20)
clusGap(as.data.frame(pd), kmeans, 'firstSEmax',B=1)
library(mclust)
d_clust(Mclust(as.matrix(pd),G=1:20)
d_clust <- Mclust(as.matrix(pd),G=1:20)
d_clust
names(d_clust)
d_clust$z
dim(d_clust$z)[2]
names(clusters)
names(clusters)$cluster
clusters$cluster
clusters$center
d.3 <- rowSums((clusters$centers)^2)
rowSums((clusters$centers)^2)
which(cluster.center == min(cluster.center))[1]
min(cluster.center)
cluster.center == min(cluster.center)
which(cluster.center == min(cluster.center))
cluster.1 = which(cluster.center == min(cluster.center))
clsuter.1
cluster.A = which(cluster.center == min(cluster.center))[1]
cluster.A
cluster.A[1]
cluster.A == 2
cluster.C
as.factor(pd$cluster.real)
levels(pd$cluster.real)
print(qplot(x, y, color=cluster,real, data=pd))
cluster.C = which(cluster.center == max(cluster.center))
pd$cluster.real = 'B'
pd$cluster.real[which(pd$cluster == cluster.C)] = 'C'
levels(pd$cluster.real) <- c('A','B','C')
print(qplot(x, y, color=cluster.real, data=pd))
cat('made plot 1\n')
Sys.sleep(4)
cluster.centers
cluster.center
clusters$centers
clusters$centers[,1]
geom_point(aes(x=clusters$centers[,1],y=clusters$centers[,2]))
geom_point(data=clusters$centers,aes(x=x,y=y))
as.data.frame(clusters$centers)
as.data.frame(clusters$centers)$x
qplot(x, y, color=cluster.real, data=pd)+
Sys.sleep(2)
file.directory = '~/courses/stat585/'
cat('making plot 1...')
library(plumbr)
library(stream)
library(ggplot2)
abline(mf.lm)
plot(resids ~ mpg, data = as.data.frame(mf))
mf <- mutaframe(mtcars)
mf.lm <- lm(disp ~ mpg,data = as.data.frame(mf))
mf$resids <- mf.lm$residuals
mf$fitted <- mf.lm$fitted
par(mfrow=c(1,2))
add_listener(mf, function(i, j) {
plot(disp ~ mpg, data = as.data.frame(mf))
abline(lm(disp~mpg,data=as.data.frame(mf)))
plot(lm(disp~mpg,data=as.data.frame(mf))$residuals ~ mpg, data = as.data.frame(mf))
abline(h=0)
mf$disp <- mf$disp
mf$disp <- sqrt(mf$disp)
nrow(dsd$strm)
animate_data(dsd, 9900,  xlim=c(-.2,1.2), ylim=c(-.2,1.2), pointInterval=300)
d <- c(gp[1:300,1],gp[1:300,2])
d=mutaframe(d)
add_listener(d, function(i,j){
pd <- data.frame('x'=d[1:300,1],'y'=d[301:600,1])
})
cat('Currently making plot 1...')
?Mclust
pd <- data.frame('x'=gp[1:300,1],'y'=gp[301:600,1])
gp
geom_point(data=,aes(x=x,y=y,color=cluster.real))+
pd
reset(dsd)
pd <- data.frame('x'=gp[1:300,1],'y'=gp[1:300,2])
d_clust <- Mclust(as.matrix(pd),G=1:4)
clusters = kmeans(pd,dim(d_clust$z)[2])
pd$cluster = as.factor(clusters$cluster)
cluster.center <- rowSums((clusters$centers)^2)
cluster.A = which(cluster.center == min(cluster.center))
cluster.B = which(cluster.center == max(cluster.center))
pd$cluster.real = 'C'
pd$cluster.real[which(pd$cluster == cluster.A)] = 'A'
pd$cluster.real[which(pd$cluster == cluster.B)] = 'B'
pd$cluster.real <- as.factor(pd$cluster.real)
print(
ggplot()+
geom_point(data=pd,aes(x=x,y=y,color=cluster.real))+
geom_point(data=as.data.frame(clusters$centers),aes(x=x,y=y))
)
for(i in 2:33){
dsd <- DSD_GaussianMoving(n=100,t=33)
for(1 in 2:33){
runPlots <- function (dsd) {
reset_stream(dsd)
for(i in 1:33){
gp <- get_points(dsd,300)
d[1] <- c(gp[1:300,1],gp[1:300,2])
Sys.sleep(1)
}
runPlots(dsd)
base::source("/tmp/r-plugin-user/Rsource-5317-lab12.rnw")
library(RMySQL)
dsn = c('d1','d2')
library(roxygen2)
library(R2WinBUGS)
unlist(strsplit(' ',dsn))
?strsplit
dsn = 'd1 d2'
unlist(strsplit(dsn,' '))
?write.csv
EXPORT.TEMPLATE = 'write.csv(R-DATASET,file=\'R-WORKINGDIR/out/SAScache/DATASET-FROM-R.csv\',row.names=FALSE,na=\'\')'
dsn='d1 d2'
dsn='d1, d2'
dsn=gsub(',','',dsn)
dsn=unlist(strsplit(dsn,' '))
dsn
EXPORT.TEMPLATE = 'write.csv(R-DATASET,file=\'R-WORKINGDIR/out/SAScache/DATASET-FROM-R.csv\',row.names=FALSE,na=\'\');'
EXPORT.TEMPLATE = 'write.csv(DATASET-FROM-R,file=\'R-WORKINGDIR/out/SAScache/DATASET-FROM-R.csv\',row.names=FALSE,na=\'\');'
EXPORT.TEMPLATE = gsub('R-WORKINGDIR',getwd(),EXPORT.TEMPLATE)
EXPORT.TEMPLATE
gsub('DATASET-FROM-R',dsn,EXPORT.TEMPLATE)
sapply(1:length(dsn), gsub('DATASET-FROM-R',dsn[i],EXPORT.TEMPLATE))
sapply(1:length(dsn), function(i) gsub('DATASET-FROM-R',dsn[i],EXPORT.TEMPLATE))
paste(sapply(1:length(dsn), function(i) gsub('DATASET-FROM-R',dsn[i],EXPORT.TEMPLATE)),collapse=' ')
EXPORT.COMMAND = paste(sapply(1:length(dsn), function(i) gsub('DATASET-FROM-R',dsn[i],EXPORT.TEMPLATE)),collapse=' ')
IMPORT.TEMPLATE = 'proc import datafile = R-WORKINGDIR/out/SAScache/DATASET-FROM-R.csv dbms = CSV REPLACE; getnames = YES; run;'
IMPORT.TEMPLATE = gsub('R-WORKINGDIR',getwd(),IMPORT.TEMPLATE)
IMPORT.COMMAND = paste(sapply(1:length(dsn), function(i) gsub('DATASET-FROM-R',dsn[i],IMPORT.TEMPLATE)),collapse=' ')
IMPORT.COMMAND
install()
library(SASnatch)
helloSnatch('... hopefully')
system('rm -rf ~/courses/stat585/SASnatch/sandbox/fake_project3')
system('mkdir ~/courses/stat585/SASnatch/sandbox/fake_project3')
makeSAScache('~/courses/stat585/SASnatch/sandbox/fake_project3')
rm(list=ls())
library(devtools)
setwd('~/courses/stat585/SASnatch')
document()
build_vignettes()
check()
